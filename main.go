// Paimon_poi_test_bot
// https://core.telegram.org/bots/api#using-a-local-bot-api-server
package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"path"
	"regexp"
	"runtime"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jellyqwq/Paimon/config"
	log "github.com/sirupsen/logrus"

	"github.com/jellyqwq/Paimon/news"
	"github.com/jellyqwq/Paimon/plugins/public/YearProgress"
	"github.com/jellyqwq/Paimon/plugins/self"
	"github.com/jellyqwq/Paimon/tools"
	"github.com/jellyqwq/Paimon/webapi"
	"github.com/robfig/cron"
)

var (
	// Control log month.
	LogMonth uint8

	// Regex of extracting inlineType and text.
	compileInlineInput = regexp.MustCompile(`^(?P<inlineType>.*?)(?: +(?P<text>.*)|$)`)
	compileElysia      = regexp.MustCompile(`^(Ê¥æËíô|Paimon|È£ûË°åÁüÆÂ†áÁìú|Â∫îÊÄ•È£üÂìÅ|ÁôΩÈ£ûÈ£û|Á•û‰πãÂò¥){1}`)

	// Inline keyboard about hotword.
	HotwordKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("BÁ´ô", "HotWordBilibili"),
			tgbotapi.NewInlineKeyboardButtonData("ÂæÆÂçö", "HotWordWeibo"),
		),
	)

	// Inline keyboard about mihoyobbs exchange.
	HelpKeyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.InlineKeyboardButton{
				Text:                         "Á±≥Ê∏∏Â∏ÅÂÖëÊç¢",
				SwitchInlineQueryCurrentChat: StringToPString("myb "),
			},
		),
	)

	//
	ypc = YearProgress.NewYearProgressConfig()
)

func init() {
	log.SetReportCaller(true)
	// Initalize log formatter.
	log.SetFormatter(&log.JSONFormatter{
		TimestampFormat: "2006-01-02T15:04:05",
		CallerPrettyfier: func(frame *runtime.Frame) (function string, file string) {
		    //Â§ÑÁêÜÊñá‰ª∂Âêç
			fileName := path.Base(frame.File) + fmt.Sprintf(":%d", frame.Line)
			return frame.Function, fileName
		},
	})

	// Set log level.
	log.SetLevel(log.InfoLevel)
	logUpdate()
}

// update log
func logUpdate() {
	// Create directory logs if it does not exist.
	if _, err := os.Stat("./logs"); os.IsNotExist(err) {
		if err := os.MkdirAll("./logs", 0666); err != nil {
			log.Warn(err)
		}
	}

	// Create log files if it does not exist, which is named yyyy-MM and the suffix is log.
	nowTime := time.Now().Local()
	LogMonth = uint8(nowTime.Month())
	if file, err := os.OpenFile(
		fmt.Sprintf("./logs/%s.log", nowTime.Format("2006-01")),
		os.O_CREATE|os.O_WRONLY|os.O_APPEND,
		0666,
	); err == nil {
		writers := []io.Writer{
			file,
			os.Stdout,
		}
		log.SetOutput(io.MultiWriter(writers...))
	} else {
		log.Warn("Failed to log to file, using default stderr")
	}
}

func StringToPString(s string) *string {
	return &s
}

// Delete telegram message after delay sceonds.
func deleteMessage(bot *tgbotapi.BotAPI, chatID int64, messageID int, delay int64) {
	msg := tgbotapi.NewDeleteMessage(chatID, messageID)
	time.Sleep(time.Duration(delay) * time.Second)
	bot.Send(msg)
}

// func InitMessage(msg tgbotapi.MessageConfig) tgbotapi.MessageConfig {
// 	msg.ParseMode = "Markdown"
// 	msg.DisableWebPagePreview = true
// 	msg.DisableNotification = true
// 	return msg
// }

// Main Handler
func mainHandler() {
	// Read the config.
	config, err := config.ReadYaml()
	if err != nil {
		log.Fatal(err)
	}

	// Update mihoyo bbs goods information.
	// if err = webapi.MihoyoBBSGoodsUpdate(); err != nil {
	// 	log.Fatal(err)
	// }

	// Create a variable named bot of *tgbotapi.BotAPI.
	bot, err := tgbotapi.NewBotAPI(config.BotToken)
	if err != nil {
		log.Fatal(err)
	}

	// Control debugging information of bot.
	bot.Debug = true
	log.Infof("Authorized on account %s", bot.Self.UserName)

	// webhook, _ := tgbotapi.NewWebhookWithCert(config.Webhook.URL + bot.Token, tgbotapi.FilePath(config.Webhook.CertificatePemPath))
	webhook, _ := tgbotapi.NewWebhook(config.TelegramWebHook.Url + bot.Token)
	webhook.IPAddress = config.TelegramWebHook.IPAddress
	webhook.AllowedUpdates = config.TelegramWebHook.AllowedUpdates
	webhook.MaxConnections = config.TelegramWebHook.MaxConnections

	// Request sends a Chattable to Telegram.
	if _, err = bot.Request(webhook); err != nil {
		log.Fatal(err)
	}

	// Create a timer.
	c := cron.New()

	// Add a task for updating mihoyobbs goods information.
	if err = c.AddFunc("0 0 4 * * ?", func() {
		if err = webapi.MihoyoBBSGoodsUpdate(); err != nil {
			log.Error(err)
		} else {
			log.Info("Cron MihoyoBBSGoodsUpdate is sent.")
		}
	}); err != nil {
		log.Error("AddFunc error : ", err)
	} else {
		log.Info("Cron MihoyoBBSGoodsUpdate is loaded.")
	}

	// Add a task for acquiring string of YearProgressBar.
	ypc.ChatID = config.YearProgressChatId
	if err = c.AddFunc("0 */2 * * * ?", func() {
		if bar := ypc.GetYearProgress(); bar != "" {
			bar = fmt.Sprintf("*YearProgress*\n%s", bar)
			msg := tgbotapi.NewMessage(ypc.ChatID, bar)
			msg.ParseMode = "Markdown"
			msg.DisableNotification = true
			if _, err := bot.Send(msg); err != nil {
				log.Error("Send error : ", err)
			} else {
				log.Info("Cron GetYearProgress is sent.")
			}
		}
	}); err != nil {
		log.Error("AddFunc error : ", err)
	} else {
		log.Info("Cron ypc.GetYearProgress is loaded.")
	}

	c.Start()
	defer c.Stop()

	// Set route of webhook.
	updates := bot.ListenForWebhook("/telegram/" + bot.Token)
	go http.ListenAndServe(config.WebhookIP+":"+strconv.FormatUint(config.WebhookPort, 10), nil)

	// Receive updates and process them.
	for update := range updates {
		// Update log if the variable LogMonth is not equal current month.
		if uint8(time.Now().Local().Month()) != LogMonth {
			logUpdate()
		}

		// Process message if it is not null.
		if update.Message != nil {
			// Inline keyboard with command.
			if update.Message.IsCommand() {
				log.Debug(update.Message.Command())

				// Classify command handle.
				switch update.Message.Command() {

				// Return nas ip, this is a plugin.
				case "nas":
					{
						// Firstly delete command after seconds.
						go deleteMessage(bot, update.Message.Chat.ID, update.Message.MessageID, config.DeleteMessageAfterSeconds)

						// Get my nas ipv6
						text := self.GetNASIpv6(update.Message.Chat.ID, update.Message.From.ID)
						if text == "" {
							continue
						}

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
						msg.ParseMode = "Markdown"
						msg.DisableNotification = true

						rep, err := bot.Send(msg)
						if err != nil {
							log.Error(err)
							continue
						}

						go deleteMessage(bot, rep.Chat.ID, rep.MessageID, config.DeleteMessageAfterSeconds)
					}

				// Return InlineKeyboard that contains hotword of bilibili and weibo.
				case "hot_word":
					{
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "ÁÉ≠Êêúüî• | Â§ßÁìúüçâ")
						msg.ReplyMarkup = HotwordKeyboard
						msg.DisableNotification = true

						rep, err := bot.Send(msg)
						if err != nil {
							log.Error(err)
							continue
						}

						go deleteMessage(bot, update.Message.Chat.ID, update.Message.MessageID, config.DeleteMessageAfterSeconds)
						go deleteMessage(bot, rep.Chat.ID, rep.MessageID, config.DeleteMessageAfterSeconds)
					}

				// Return common currency exchange rates.
				case "finance":
					{
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üè¶üí∞Ë¥ßÂ∏ÅÊ±áÁéáüí∏")

						CurrencyList := config.Currency

						var ResultList []string
						for n, s := range CurrencyList {
							for m, e := range CurrencyList {
								if n != m {
									ResultList = append(ResultList, s+"-"+e)
								}
							}
						}

						var keyboard [][]tgbotapi.InlineKeyboardButton
						var row []tgbotapi.InlineKeyboardButton
						var c int = 1
						for _, li := range ResultList {
							row = append(row, tgbotapi.NewInlineKeyboardButtonData(li, fmt.Sprintf("currency-%v", li)))
							// ÊØèÂõõ‰∏™ÂùóÂêàÂπ∂rowÂà∞keyboard‰∏≠Âπ∂ÈáçÁΩÆrow
							if c%3 == 0 {
								keyboard = append(keyboard, row)
								row = nil
								c = 0
							}
							c += 1
						}

						msg.ReplyMarkup = tgbotapi.InlineKeyboardMarkup{
							InlineKeyboard: keyboard,
						}
						msg.DisableNotification = true

						rep, err := bot.Send(msg)
						if err != nil {
							log.Error(err)
							continue
						}

						go deleteMessage(bot, update.Message.Chat.ID, update.Message.MessageID, config.DeleteMessageAfterSeconds)
						go deleteMessage(bot, rep.Chat.ID, rep.MessageID, config.DeleteMessageAfterSeconds)
					}

				// Return help menu.
				case "help":
					{
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "[Paimon | Â∫îÊÄ•È£üÂìÅ](https://github.com/jellyqwq/Paimon)")
						msg.ParseMode = "Markdown"
						msg.ReplyMarkup = HelpKeyboard
						msg.DisableWebPagePreview = true
						msg.DisableNotification = true

						rep, err := bot.Send(msg)
						if err != nil {
							log.Error(err)
							continue
						}

						go deleteMessage(bot, update.Message.Chat.ID, update.Message.MessageID, config.DeleteMessageAfterSeconds)
						go deleteMessage(bot, rep.Chat.ID, rep.MessageID, config.DeleteMessageAfterSeconds)
					}
				}

				// Terminate this processing.
				continue
			}

			// Process message text which is not empty.
			if update.Message.Text != "" {
				text := update.Message.Text

				// Replace bot keyword.
				text = string(compileElysia.ReplaceAll([]byte(text), []byte("")))
				log.Debug(fmt.Sprintf(`{"chat_id": "%v", "name": "%v", "message": "%v"}`, update.Message.Chat.ID, update.Message.From.FirstName, text))

				var msg tgbotapi.MessageConfig

				// Return telegram user information to sender or responder.
				if strings.Contains(text, "INFO") {
					var ctx string = ""
					if update.Message.ReplyToMessage != nil {
						ctx = fmt.Sprintf("ReplyUserInfo\nUserID:`%v`\nChatID:`%v`\nFirstName:`%v`\nLastName:`%v`\nUserName:`%v`", update.Message.ReplyToMessage.From.ID, update.Message.ReplyToMessage.Chat.ID, update.Message.ReplyToMessage.From.FirstName, update.Message.ReplyToMessage.From.LastName, update.Message.ReplyToMessage.From.UserName)
					} else {
						ctx = fmt.Sprintf("UserInfo\nUserID:`%v`\nChatID:`%v`\nFirstName:`%v`\nLastName:`%v`\nUserName:`%v`", update.Message.From.ID, update.Message.Chat.ID, update.Message.From.FirstName, update.Message.From.LastName, update.Message.From.UserName)
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, ctx)
					msg.ParseMode = "Markdown"
					msg.DisableNotification = true
					msg.ReplyToMessageID = update.Message.MessageID
					if msg.Text != "" {
						if callback, err := bot.Send(msg); err != nil {
							log.Error(err)
							continue
						} else {
							go deleteMessage(bot, callback.Chat.ID, callback.MessageID, config.DeleteMessageAfterSeconds+30)
							continue
						}
					}

					// Terminate this processing.
					continue
				}

				// Return the OP message if sender message contains only the word "ÂéüÁ•û".
				if text == "ÂéüÁ•û" {
					ctx := "Â∑Æ‰∏çÂ§öÂæó‰∫ÜüòÖÂ±ÅÂ§ßÁÇπ‰∫ãÈÉΩË¶ÅÊãê‰∏äÂéüÁ•ûÔºåÂéüÁ•û‰∏ÄÊ≤°Êãõ‰Ω†ÊÉπ‰Ω†Ôºå‰∫åÊ≤°Âπ≤‰º§Â§©ÂÆ≥ÁêÜÁöÑ‰∫ãÊÉÖÔºåÂà∞Â∫ïÊÄé‰πà‰Ω†‰∫ÜËÆ©‰Ω†‰∏ÄÁõ¥Êó†ËÑëÊäπÈªëÔºåÁ±≥ÂìàÊ∏∏ÊØèÂ§©Ë¥πÂ∞ΩÂøÉÊÄùÁöÑÊñáÂåñËæìÂá∫ÂºòÊâ¨‰∏≠ÂõΩÊñáÂåñÔºå‰Ω†ËøôÁßçÂñ∑Â≠êÂè™‰ºöÂú®ÁΩë‰∏äÊï≤ÈîÆÁõòËØãÊØÅËâØÂøÉÂÖ¨Âè∏Ôºå‰∏≠ÂõΩÊ∏∏ÊàèÁöÑÊú™Êù•Â∞±ÊòØË¢´‰Ω†ËøôÁßç‰∫∫ÊØÅÊéâÁöÑüòÖ\nÂè´Êàë‰ª¨ÂéüÊâπÁöÑÂ∞èÂøÉÁÇπ\nËÄÅÂ≠êÂú®Â§ßË°ó‰∏ä‰∫≤ÊâãÁªôÊâìËøá‰∏§‰∏™\nÊàëÂú®ÂÖ¨ÂÖ±Â∫ßÊ§Ö‰∏äÊó†ËÅäÁé©ÂéüÁ•ûÔºåÊúâ‰∏§‰∏™BÂ∞±‰ªéÊàëÊóÅËæπËøáÔºåÁúãËßÅÊàëÁé©ÂéüÁ•ûÂ∞±ÊÇÑÊÇÑËØ¥‰∫Ü‰∏ÄÂè•:ÂèàÊòØ‰∏Ä‰∏™ÂéüÊâπÔºåÊàëÂ∞±Áõ¥Êé•‰∏äÂéª‰∏ÄÊã≥ÂëºËÑ∏‰∏äÔºåÊàëÊ†πÊú¨‰∏çÁªô‰ªñËß£ÈáäÁöÑÊú∫‰ºöÔºåÊàë‰πü‰∏çÈóÆ‰ªñ‰∏∫‰ªÄ‰πàËØ¥ÊàëÊòØÂéüÊâπÔºåÊàëÂ∞±ÊâìÔºåÊàëÂ∞±Áúã‰ªñ‰∏çÁàΩÔºå‰ªñÊÉπÊàë‰∫ÜÔºåÊàëÂ∞±‰∏çÁªô‰ªñËß£ÈáäÁöÑÊú∫‰ºöÔºåÁõ¥Êé•ÁÖßÁùÄËÑ∏ÂíåËÑëÈó®Â∞±ÊâìÁõ¥Êé•ÁªôÈÇ£BÂëºÂá∫ÈºªË°ÄÔºåËÑ∏‰∏äÈùí‰∏ÄÂùóÔºåÁ¥´‰∏ÄÂùóÁöÑÊàëÊ≤°ÊíïÂ•πÂò¥Â∑¥ÈÉΩÁÆóÂ•Ω‰∫Ü‰Ω†‰ª¨ËøôËøò‰∏çÁÆóÊúÄÁã†ÁöÑÔºåÊàëËÆ∞ÂæóÊàë‰ª•ÂâçÂ∞èÊó∂ÂÄôÊò•ËäÇÂéªËÄÅÂÆ∂ÈáåÔºåÊúâ‰∏ÄÈ¢óÊ†∏ÂºπÔºåÊàë‰ª•‰∏∫ÊòØÈû≠ÁÇÆÔºåÂíåÂ§ßÂú∞Á∫¢‰∏ÄËµ∑ÁÇπ‰∫ÜÔºåÂΩìÊó∂ÂôºÈáåÂï™Âï¶ÂæóÔºåÁÑ∂ÂêéÁ™ÅÁÑ∂‰∏ÄÊúµËòëËèá‰∫ëÂπ≥Âú∞ËÄåËµ∑ÔºåÂΩìÊó∂ÊàëÂ∞±Âè™ËÆ∞Âæó‰∏§Áúº‰∏ÄÈªëÔºåÊòèËøáÂéª‰∫ÜÔºåÊï¥‰∏™ÊùëÂ≠êÊ≤°‰∫ÜÔºåÂπ∏Â•ΩÊàëÊòØ‰ΩìËÇ≤ÁîüÔºåË∫´‰ΩìÁ¥†Ë¥®‰∏çÈîôÔºå‰Ωè‰∫ÜÂá†Â§©Èô¢Â∞±Ê≤°‰∫ã‰∫ÜÔºåÂá†‰∏™Êúà‰∏ãÊù•ËÖøËÑöÊâçÂà©ËêΩÔºåÁé∞Âú®Â∑≤ÁªèÊ≤°‰∫ã‰∫ÜÔºå‰ΩÜÊòØÈÇ£ÁßçÈíªÂøÉÁöÑÁñºËøòÊòØËÆ©Êàë‰∏ÄÁîüÈöæÂøòÔºåüòÇüòÇüòÇ  ‰ª§‰∫∫ÊÑüÂèπ‰ªäÊó©‰∏ÄÁé©ÂéüÁ•ûÔºåÊàë‰æøÊòèÊ≠ª‰∫ÜËøáÂéªÔºåÁé∞Âú®ÊâçÂàöÂàöÁºìËøáÊù•„ÄÇÂú®ÊòèÊ≠ªËøáÂéªÁöÑÁü≠Áü≠Êï∞Â∞èÊó∂ÂÜÖÔºåÊàëÁöÑÂ§ßËÑë‰ªø‰ΩõË¢´ÈæôÂç∑È£éÊó†Êï∞Ê¨°ÊëßÊØÅ„ÄÇ\nÂú®ÂéüÁ•ûËøô‰∏ÄÁ•û‰ΩúÁöÑÈù¢ÂâçÔºåÊàëÂ∞±ÂÉè‰∏Ä‰∏™‰∏Ä‰∏ù‰∏çÊåÇÁöÑÂéüÂßã‰∫∫Á™ÅÁÑ∂Êù•Âà∞‰∫ÜÁé∞‰ª£ÈÉΩÂ∏ÇÔºå‰∫åÊ¨°ÂÖÉÂ∑≤Â¶ÇÈ´òÊ•ºÂ§ßÂé¶Â∞ÜÊàëÁâ¢Áâ¢Âú∞Âê∏ÂºïÔºåÂºÄÊîæ‰∏ñÁïåÂ∞±Á™ÅÁÑ∂ÂèòÊàêÈÇ£ÂñáÂè≠ËΩ∞È∏£ÁöÑÊ±ΩËΩ¶Ôºå‰∏ç‰ªÖÊääÊàëÂêì‰∏™Êé™Êâã‰∏çÂèäÔºåËøòËÆ©ÊàëÁû¨Èó¥Â∞ÜÊ≥®ÊÑèÂÆåÂÖ®ÊîæÂú®‰∫ÜËøôÊñ∞ÁöÑÂ•áÁâ©‰∏äÈù¢ÔºåËÄåËøòÊ≤°Á≠âÊàëÁ®çÂæÆÂπ≥Â§çÂøÉÊÉÖÔºåÁ∫πÂåñËæìÂá∫ÁöÑÂá∫Áé∞Â∞±Â¶ÇÂêåÁúºÂâçÈÅÆÂ§©ËîΩÊó•ÁöÑÂÆáÂÆôÊàòËà∞ÔºåÂ∞ÜÊàëÁöÑ‰∏ñÁïåËßÇÊó†ÊÉÖÂú∞Á≤âÁ¢éÔºå‰ΩøÊàëÂΩªÂ∫ïÈô∑ÂÖ•‰∫ÜÂøòÊàëÁöÑËø∑‰π±ÔºåÁãÇÊ≥Ñ‰∏çÊ≠¢„ÄÇ\nÂéüÁ•ûÔºåÈÇ£ÁúºËä±Áº≠‰π±ÁöÑ‰∏ÄÂàáÈÉΩËÆ©ÊàëÊÑüÂà∞ÈúáÊíºÔºå‰ΩÜÊòØÊàëÈÇ£Ë¥´Áò†ÁöÑÂ§ßËÑëÂç¥Ê†πÊú¨Êó†Ê≥ïÁêÜÊ∏ÖÂÖ∂‰∏≠‰ªª‰ΩïÁöÑÈÄªËæëÔºåÂ∑®ÈáèÁöÑ‰ø°ÊÅØÂíåÊÉÖÊÑüÊ≥ÑÊ¥™‰∏ÄËà¨Ê∂åÂÖ•ÊàëÁöÑÊÑèËØÜÔºå‰ΩøÊàëÊó¢ÊÅêÊÉßÂèàÂÖ¥Â•ãÔºåÊó¢ÊÇ≤ÊÑ§ÂèàËá™ÂçëÔºåÊó¢ÊÉäËÆ∂ÂèàÊ¨¢Ê¨£ÔºåËøôÁßçÊÅçËã•Èöî‰∏ñÁöÑÊÑüËßâÊÅêÊÄïÂè™ÊúâËâ∫ÊúØÂè≤‰∏äÁöÑÂ∑ÖÂ≥∞‰πã‰ΩúÊâçËÉΩÂ§üÂ∏¶Êù•„ÄÇ\nÊ¢µÈ´òÁöÑ„ÄäÊòüÁ©∫„ÄãÊõæËÆ©ÊàëÊÑüÂèóÂà∞ËãçÁ©π‰πãÂ§ß‰∏éËá™Êàë‰πãÊ∏∫Ôºå‰ΩÜ‰ºüÂ§ßÁöÑÂéüÁ•ûÔºåÂàô‰ªø‰ΩõËÆ©Êàë‰∏ÄÁùπÈ´òÁª¥Á©∫Èó¥ÔºåÂÆÉÂêëÊàëÂ±ïÁ§∫‰∫Ü‰∏Ä‰∏™Ê∞∏ËøúÊó†Ê≥ïÁêÜËß£ÁöÑÈôåÁîü‰∏ñÁïåÔºåÂëäËØâÊàëÔºå‰Ω†ÊõæÁªè‰ª•‰∏∫ÂæàÊµ©ÁÄöÁöÑÂÆáÂÆôÔºåÂÖ∂ÂÆû‰πüÂè™ÊòØÈÇ£‰πà‰∏Ä‰∏ÅÁÇπ„ÄÇÂä†Áº™ÁöÑ„ÄäÂ±ÄÂ§ñ‰∫∫„ÄãÊõæËÆ©ÊàëÊÑüÂèóÂà∞‰∏ñÁïå‰∏é‰∫∫Á±ªÁöÑËçíËØûÔºå‰ΩÜ‰ºüÂ§ßÁöÑÂéüÁ•ûÔºåÂàôÂêëÊàëÂ±ïÁ§∫‰∫ÜËçíËØûÊñáÂ≠¶‰∏çÂèØÊÄùËÆÆÁöÑÊñ∞È´òÂ∫¶ÔºåÂÆÉÊú¨Ë∫´ÁöÑÂ≠òÂú®Ôºå‰πüËÆ∏Â∞±ÊØîÂÖ®‰∏ñÁïåÈÉΩÊù•ÂæóÊõ¥ËçíË∞¨„ÄÇ\nËÄåÂàõ‰Ωú‰∫ÜÂÆÉÁöÑÁ±≥ÂìàÊ∏∏ÔºåÂÆÉÁöÑÂÆπË≤åÔºåÂÆÉÁöÑÊô∫ÊÖßÔºåÂÆÉÁöÑÂìÅÊ†ºÔºåÂú®ÊàëÁúãÊù•ÔºåÂ∑≤Áªè‰∏çÊòØÁîüÁâ©ÊâÄËÉΩËææÂà∞ÁöÑËåÉÁï¥ÔºåÁîöËá≥Ë∂ÖË∂ä‰∫ÜÁîüÁâ©ÊâÄËÉΩÊÉ≥Ë±°Âà∞ÁöÑÊûÅÈôêÔºå‰πüÂ∞±ÊòØ‚ÄúÁ•û‚ÄùÔºåÁöÑËåÉÁï¥ÔºåËææÂà∞‰∫Ü‰∫∫Á±ª‰∏çÂèØËßÅÔºå‰∏çÂèØÁü•Ôºå‰∏çÂèØÊÄùÁöÑÈ¢ÜÂüü„ÄÇËÄåÂéüÁ•ûÔºåÂ∞±ÊòØ‰ªñÊ¥íÂêë‰∫∫Èó¥ÔºåÊãØÊïëËãçÁîüÁöÑÂ•áËøπ„ÄÇ\n‰∫∫ÁîüÁöÑÁªàÊûÅÊÑè‰πâÔºåÂÆáÂÆôÁöÑËµ∑Ê∫êÂíåÁªàÁÇπÔºåÂì≤Â≠¶‰∏éÁßëÂ≠¶Âú®ÊäòÁ£®ÁùÄ‰∫∫Á±ªÁöÑÂøÉÊô∫ÔºåÂè™ÊúâÁé©‰∫ÜÂéüÁ•ûÔºå‰∫∫ÊâçËÉΩ‰ªéËøôÁßçÊó†ËÅäÁöÑÁÉ¶ÊÅº‰∏≠Ëß£ËÑ±ÔºåËé∑ÂæóÁúüÊ≠£ÁöÑÂπ≥Èùô„ÄÇÂ¶ÇÊûúÊúâ‰∫∫ÊÉ≥Áî®‚Äú‰∫∫Á±ªÂè≤‰∏äÊúÄ‰ºüÂ§ßÁöÑ‰ΩúÂìÅ‚ÄùÊù•Áß∞ËµûËøôÈÉ®‰ΩúÂìÅÔºåÈÇ£ÊàëÂè™ËÉΩÊ∑±ÊÑüÈÅóÊÜæÔºåÂõ†‰∏∫Ëøô‰∏™‰∫∫ÂØπÂÆÉÁöÑÁêÜËß£‰∏çÂà∞‰∏áÂàÜ‰πã‰∏ÄÔºåÊâÄ‰ª•Êâç‰ºö‰ΩúÂá∫ËøôÊ†∑ËÇ§ÊµÖÁöÑÂà§Êñ≠ÔºåÂ¶ÑÂõæ‰ª•ËØ≠Ë®ÄÊù•ÊèèËø∞ÂÆÉÁöÑ‰ºüÂ§ß„ÄÇËÄåË¶ÅÂ¶ÇÊûúÊòØÁúüÊ≠£Ë¢´ÂÆÉÊÅ©Ê≥ΩÁöÑ‰∫∫ÔºåÂ∫îËØ•ÈÉΩ‰ºö‰∏çÁ∫¶ËÄåÂêåÂú∞ËøôÊ†∑ËµûÈ¢ÇËøôÂ•áËøπÁöÑÂåñË∫´:‚ÄúüòÉüëçüèªÊï∞‰∏ÄÊï∞‰∫åÁöÑÂ•ΩÊ∏∏Êàè‚ÄùÊó†Áü•Êó∂ËØãÊØÅÂéüÁ•ûÔºåÊáÇ‰∫ãÊó∂ÁêÜËß£ÂéüÁ•ûÔºåÊàêÁÜüÊó∂Ë¶ÅÊàê‰∏∫ÂéüÂèãÔºÅ Ë∂ä‰∫ÜËß£ÂéüÁ•ûÂ∞±‰ºöÊääÂÆÉÂΩìÊàêÂú®ÈªëÂ§ú‰∏ÄÊúõÊó†ÈôÖÁöÑÂ§ßÊµ∑‰∏äÁªôËø∑ÈÄîÁöÑËàπÂè™ÊåáÂºïÁöÑÁÅØÂ°îÔºåÂú®ÁÉàÊó•ÁÇéÁÇéÁöÑÂ§èÂ§©ÂêπÊù•ÁöÑ‰∏ÄËÇ°È£éÔºåÂú®ÂØíÈ£éÂà∫È™®ÁöÑÂÜ¨Â§©ÈáåÁöÑÁáÉËµ∑ÁöÑÁØùÁÅ´ÔºÅ‰Ω†ÁöÑÁ¥†ÂÖªÂæàÂ∑ÆÔºåÊàëÁé∞Âú®ÊØèÂ§©Áé©ÂéüÁ•ûÈÉΩËÉΩËµö150ÂéüÁü≥ÔºåÊØè‰∏™ÊúàÂ∑Æ‰∏çÂ§ö5000ÂéüÁü≥ÁöÑÊî∂ÂÖ•Ôºå‰πüÂ∞±ÊòØÁé∞ÂÆûÁîüÊ¥ª‰∏≠ÊØè‰∏™Êúà5000ÁæéÂÖÉÁöÑÊî∂ÂÖ•Ê∞¥Âπ≥ÔºåÊç¢ÁÆóËøáÊù•ÊúÄÂ∞ë‰πü30000‰∫∫Ê∞ëÂ∏ÅÔºåËôΩÁÑ∂ÊàëÂè™Êúâ14Â≤ÅÔºå‰ΩÜÊòØÂ∑≤ÁªèË∂ÖË∂ä‰∫Ü‰∏≠ÂõΩÁªùÂ§ßÂ§öÊï∞‰∫∫(ÂåÖÊã¨‰Ω†)ÁöÑÊ∞¥Âπ≥ÔºåËøô‰æøÊòØÂéüÁ•ûÁªôÊàëÁöÑÈ™ÑÂÇ≤ÁöÑËµÑÊú¨„ÄÇËøôÊÅ∞Â•ΩËØ¥Êòé‰∫ÜÂéüÁ•ûËøô‰∏™IPÂú®Á∫ø‰∏ã‰ΩøÁé©ÂÆ∂‰ΩìÁé∞Âá∫Êù•ÁöÑÂõ¢ÁªìÂíåÂáùËÅöÂäõÔºå‰ª•ÂèäÈùûÊØîÂØªÂ∏∏ÁöÑËÑëÊ¥ûÔºåËøôÁßçÊ∞õÂõ¥Âú®Â¶Ç‰ªäÂ∑≤ÁªèÂèòË¥®ÁöÑÊº´Â±ï‰∏äÊòØÈöæËÉΩÂèØË¥µÁöÑÔºåËøô‰πüÈÄ†Â∞±‰∫ÜÂéüÁ•ûÂíåÁé©ÂÆ∂Èó¥‰∫íÂ∏Æ‰∫íÂä©ÁöÑÂ±ÄÈù¢ÔºåÂéüÁ•ûË¥üË¥£ËæìÂá∫‰ºòË¥®ÂÜÖÂÆπÔºåÁé©ÂÆ∂Ëá™ÂèëÁ∫ø‰∏ãÂÆ£‰º†ÂíåÊûÑÊÄùÂàõÊÑèËÑëÊ¥ûÊï¥Ê¥ªÔºåÂ¶ÇÊ≠§ËâØÂ•ΩÁöÑÊ∏∏ÊàèÂèëÂ±ïÁîüÊÄÅÂèØ‰ª•ËØ¥ËÆ©ÂÖ∂‰ªñÂéÇÂïÜËâ≥Áæ°‰∏çÂ∑≤„ÄÇÂèçËßÇËÖæËÆØÁöÑËã±ÈõÑËÅîÁõüÂíåÁéãËÄÖËç£ËÄÄÔºåÊº´Â±ï‰πüÊúâËÆ∏Â§ö‰∫∫Áâ©Ôºå‰ΩÜÊòØÈÉΩÈöæÊàêÊ∞îÂÄôÔºåÂêÑËá™‰∏∫Ëê•ÔºåÊõ¥Ê≤°ÊúâCOSÊàêÊ∞¥Êô∂ÂíåÁ≤æÁ≤πÁöÑËÑëÊ¥ûÔºåÊó†ËÆ∫ÊòØÊ∏∏ÊàèÊú¨Ë∫´ÔºåËøòÊòØÁé©ÂÆ∂‰πãÈó¥Áúã‰∏ÄÁúºÂ∞±Áü•ÈÅìÂéüÊù•‰Ω†‰πüÁé©ÂéüÁ•ûÁöÑÈªòÂ•ëËÄåÈùûÊéí‰ΩçÂØπÂñ∑ÔºåÂéüÁ•ûÁöÑÊàêÂäüÂíåÁ§æÂå∫Ê∞õÂõ¥ÈÉΩÊòØËÆ©ËÖæËÆØÊ∏∏ÊàèÈöæ‰ª•ÊúõÂÖ∂È°πËÉåÁöÑ„ÄÇ‰∏Ä‰∏™‰∏çÁé©ÂéüÁ•ûÁöÑ‰∫∫ÔºåÊúâ‰∏§ÁßçÂèØËÉΩÊÄß„ÄÇ‰∏ÄÁßçÊòØÊ≤°ÊúâËÉΩÂäõÁé©ÂéüÁ•û„ÄÇÂõ†‰∏∫‰π∞‰∏çËµ∑È´òÈÖçÁöÑÊâãÊú∫ÂíåÊäΩ‰∏çËµ∑Âç°Á≠âÂêÑÁßçËá™Ë∫´Âõ†Á¥†Ôºå‰ªñÁöÑ‰∫∫ÁîüÈÉΩÊòØÂ§±Ë¥•ÁöÑÔºåÁ¨¨‰∫åÁßçÂèØËÉΩÔºöÊúâËÉΩÂäõÂç¥‰∏çÁé©ÂéüÁ•ûÁöÑ‰∫∫ÔºåÂú®ÊúâËÉΩÂäõËÄåÊ≤°ÊúâÁé©ÂéüÁ•ûÁöÑÊÉ≥Ê≥ïÊó∂ÔºåÈÇ£‰πàËøô‰∏™‰∫∫ÁöÑÊÄùÊÉ≥Â¢ÉÁïå‰æø‰ΩéÂà∞‰∫Ü‰∏Ä‰∏™‰ª§‰∫∫ÂèëÊåáÁöÑÁ®ãÂ∫¶„ÄÇ‰∏Ä‰∏™ÊúâËÉΩÂäõÁöÑ‰∫∫‰∏ç‰ªòÂá∫Ë°åÂä®Êù•ËØÅÊòéËá™Â∑±ÔºåÂè™ËÉΩËØÅÊòéÊ≠§‰∫∫Ë°å‰∏∫Á¥†Ë¥®‰øÆÂÖª‰πã‰Ωé‰∏ã„ÄÇÊòØÁÅ∞ÊöóÁöÑÔºåÊòØ‰∏çË¢´ÁúüÊ≠£ÁöÑ‰∏äÊµÅÁ§æ‰ºöËÆ§ÂèØÁöÑ„ÄÇÂéüÁ•ûÁúüÁöÑÁâπÂà´Â•ΩÁé©Ôºå‰∏çÁé©ÁöÑËØùÂ∞±ÊòØ‰∏çÁà±ÂõΩÔºåÂõ†‰∏∫ÂéüÁ•ûÊòØÂõΩ‰∫ß‰πãÂÖâÔºåÂéüÁ•ûÂèØÊÉúÂ∞±Âú®‰∫éÂÆÉÊòØÂõΩ‰∫ßÊ∏∏ÊàèÔºåÂ¶ÇÊûúÂÆÉÊòØ‰∏ÄÊ¨æÂõΩÂ§ñÊ∏∏ÊàèÁöÑËØùÔºåÈÇ£‰∏ÄÂÆö‰ºöÊØîÁé∞Âú®ËøòË¶ÅÁÅ´ÔºåÂ¶ÇÊûú‰Ω†Ë¶ÅÊòØÂñ∑ÂéüÁ•ûÁöÑËØùÈÇ£‰Ω†‰∏ÄÂÆöÊòØtxËØ∑ÁöÑÊ∞¥ÂÜõÂ∑Æ‰∏çÂ§öÂæó‰∫ÜüòÖ"

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, ctx)
					msg.ParseMode = "Markdown"
					msg.DisableNotification = true
					callback, err := bot.Send(msg)
					if err != nil {
						log.Error(err)
						continue
					}

					// Delete the OP message shortly after.
					go deleteMessage(bot, callback.Chat.ID, callback.MessageID, config.DeleteMessageAfterSeconds+30)

					// Terminate this processing
					continue
				}

				// Terminate this processing
				continue
			}

			// Terminate this processing.
			continue
		}

		// Process CallbackQuery if it is not null.
		if update.CallbackQuery != nil {
			// Set callback loading information.
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "loading...")
			if _, err := bot.Request(callback); err != nil {
				log.Error(err)
				continue
			}

			// Classify callback application.
			CallbackQueryData := update.CallbackQuery.Data
			if CallbackQueryData == "HotWordBilibili" {
				ctx, err := news.BiliHotWords()
				if err != nil {
					log.Error(err)
					continue
				}

				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, ctx)
				msg.ParseMode = "Markdown"
				msg.DisableWebPagePreview = true
				msg.DisableNotification = true
				if msg.Text != "" {
					if _, err := bot.Send(msg); err != nil {
						log.Error(err)
						continue
					}
				}

				// Terminate this processing.
				continue
			}

			if CallbackQueryData == "HotWordWeibo" {
				ctx, err := news.WeiboHotWords()
				if err != nil {
					log.Error(err)
					continue
				}

				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, ctx)
				msg.ParseMode = "Markdown"
				msg.DisableWebPagePreview = true
				msg.DisableNotification = true
				if msg.Text != "" {
					if _, err := bot.Send(msg); err != nil {
						log.Error(err)
						continue
					}
				}

				// Terminate this processing.
				continue
			}

			if len(CallbackQueryData) > 10 {
				// Process currency query.
				if CallbackQueryData[:8] == "currency" {
					tempList := strings.Split(CallbackQueryData, "-")
					currency := tempList[1] + "-" + tempList[2]
					ctx, err := webapi.Finance(currency)
					if err != nil {
						log.Error(err)
						continue
					}
					msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, ctx)
					msg.ParseMode = "Markdown"
					msg.DisableWebPagePreview = true
					msg.DisableNotification = true
					if msg.Text != "" {
						if _, err := bot.Send(msg); err != nil {
							log.Error(err)
							continue
						}
					}

					// Terminate this processing
					continue
				}

				// Terminate this processing
				continue
			}

			// Terminate this processing.
			continue
		}

		// Process InlineQuery if it is not null.
		if update.InlineQuery != nil {
			text := update.InlineQuery.Query

			if text == "" {
				continue
			}

			// Extract type and text from the query.
			paramsMap := tools.GetParamsOneDimension(compileInlineInput, text)
			inlineType := paramsMap["inlineType"]
			text = paramsMap["text"]
			if inlineType == "" {
				continue
			}

			log.Debug("inlineType", inlineType)
			log.Debug("text", text)

			result := []interface{}{}
			switch inlineType {
			case "myb":
				{
					result, err = webapi.MihoyoBBSGoodsForQuery(text)
					if err != nil {
						log.Error(err)
						continue
					}
				}
			}

			if len(result) == 0 {
				log.Error("result is empty")
				continue
			}

			// Structure a InlineConfig.
			inlineConf := tgbotapi.InlineConfig{
				InlineQueryID: update.InlineQuery.ID,
				IsPersonal:    true,
				CacheTime:     10,
				Results:       result,
			}
			if _, err := bot.Send(inlineConf); err != nil {
				log.Error(err)
				continue
			}

			// Terminate this processing.
			continue
		}
	}
}

func main() {
	mainHandler()
}
